{"ast":null,"code":"var _jsxFileName = \"/Users/yevgenia/Desktop/Web-development/ADC-Generative-Art-Boilerplate-2023/app/javascript/prototypes/prototype_14/Container.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport * as Tone from 'tone';\nimport React, { Component } from 'react';\nimport * as bassSettings from './tunes/bass';\nimport * as melodySettings from './tunes/melody';\nimport * as pianoSettings from './tunes/piano';\nimport * as drumsSettings from './tunes/drums';\nimport * as birdsSettings from './tunes/birds';\nimport * as forestSettings from './tunes/forest';\nimport ToneSynth from './modules/ToneSynth';\nimport CalmSounds from './modules/CalmSounds';\nimport SC_Button from './components/SC_Button';\nimport SC_Slider from './components/SC_Slider';\nvar bassSynth;\nvar bassChorus;\nvar bassPingPongDelay; //namepspace bass\n\nvar bassDistortion;\nvar bassAutoWah;\nvar bassAutoFilter;\nvar melodySynth;\nvar melodyChorus;\nvar melodyPingPongDelay;\nvar melodyDistortion;\nvar melodyAutoWah;\nvar melodyAutoFilter;\nvar forestSynth;\nvar forestPingPongDelay;\nvar forestDistortion;\nvar forestAutoWah;\nvar forestAutoFilter;\n\nvar Container = /*#__PURE__*/function (_Component) {\n  _inherits(Container, _Component);\n\n  var _super = _createSuper(Container);\n\n  function Container(props) {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _super.call(this, props);\n\n    _this.handleStart = function () {\n      var _this$state = _this.state,\n          bassSettings = _this$state.bassSettings,\n          melodySettings = _this$state.melodySettings,\n          forestSettings = _this$state.forestSettings; //\n      //\n\n      bassSynth = new Tone.Synth(bassSettings.synth);\n      bassDistortion = new Tone.Distortion(bassSettings.distortion);\n      bassAutoWah = new Tone.AutoWah(bassSettings.autoWah);\n      bassAutoFilter = new Tone.AutoFilter(bassSettings.autoFilter).start();\n      bassSynth.chain(bassDistortion, bassAutoWah, bassAutoFilter); // const bassPart = new Tone.Part((time, note) => {\n      //   bassSynth.triggerAttackRelease(\n      //     note.noteName,\n      //     note.duration,\n      //     time,\n      //     note.velocity\n      //   )\n      // }, bassSettings.sequence.steps).start(0)\n      // bassPart.loopEnd = bassSettings.sequence.duration\n      // bassPart.loop = true\n      //\n      //\n\n      melodySynth = new Tone.Synth(melodySettings.synth);\n      melodyChorus = new Tone.Chorus(melodySettings.chorus).start();\n      melodyDistortion = new Tone.Distortion(melodySettings.distortion);\n      melodyAutoWah = new Tone.AutoWah(melodySettings.autoWah);\n      melodyAutoFilter = new Tone.AutoFilter(melodySettings.autoFilter).start();\n      melodyPingPongDelay = new Tone.PingPongDelay(melodySettings.pingPongDelay).toDestination();\n      melodySynth.chain(melodyChorus, melodyDistortion, melodyAutoWah, melodyAutoFilter, melodyPingPongDelay);\n      var melodyPart = new Tone.Part(function (time, note) {\n        melodySynth.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n      }, melodySettings.sequence.steps).start(0);\n      melodyPart.loopEnd = melodySettings.sequence.duration;\n      melodyPart.loop = true; //\n      //\n      //\n      //\n\n      forestSynth = new Tone.Synth(forestSettings.synth);\n      forestDistortion = new Tone.Distortion(forestSettings.distortion);\n      forestAutoWah = new Tone.AutoWah(forestSettings.autoWah);\n      forestAutoFilter = new Tone.AutoFilter(forestSettings.autoFilter).start();\n      forestPingPongDelay = new Tone.PingPongDelay(forestSettings.pingPongDelay).toDestination();\n      forestSynth.chain(forestDistortion, forestAutoWah, forestAutoFilter, forestPingPongDelay);\n      var forestPart = new Tone.Part(function (time, note) {\n        forestSynth.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n      }, forestSettings.sequence.steps).start(0);\n      forestPart.loopEnd = forestSettings.sequence.duration;\n      forestPart.loop = true; //\n      //\n\n      var sampler = new Tone.Sampler({\n        urls: {\n          A1: \"00001-Linn-9000-BassDrumrum1.mp3\",\n          A2: \"00020-Linn-9000-Tom-1.mp3\",\n          A3: \"looperman-l-4574891-0303601-my-space-sad-ambient-piano.wav\",\n          A4: \"vinyl-hiss-5862.mp3\",\n          A5: \"00048-Vermona-DRM1-MK3-BassDrum25.mp3\",\n          A6: \"00016-Linn-9000-Snare-2.mp3\",\n          A7: \"lofi-sad-beat.mp3\",\n          A8: \"mixkit-little-birds-singing-in-the-trees-17.wav\"\n        },\n        baseUrl: \"http://localhost:3000/samples/\"\n      }).toDestination();\n      var pianoPart = new Tone.Part(function (time, note) {\n        sampler.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n      }, pianoSettings.sequence.steps).start(0);\n      pianoPart.loopEnd = pianoSettings.sequence.duration;\n      pianoPart.loop = true; // //\n\n      var birdsPart = new Tone.Part(function (time, note) {\n        sampler.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n      }, birdsSettings.sequence.steps).start(0);\n      birdsPart.loopEnd = birdsSettings.sequence.duration;\n      birdsPart.loop = true; //\n      //\n      // const drumsPart = new Tone.Part((time, note) => {\n      //   sampler.triggerAttackRelease(\n      //     note.noteName,\n      //     note.duration,\n      //     time,\n      //     note.velocity\n      //   )\n      // }, drumsSettings.sequence.steps).start(0)\n      // drumsPart.loopEnd = drumsSettings.sequence.duration\n      // drumsPart.loop = true\n      // //\n\n      Tone.Transport.start();\n    };\n\n    _this.handleBassValueChange = function (property, value) {\n      var bassSettings = _this.state.bassSettings;\n\n      if (property === 'synthType') {\n        bassSynth.oscillator.type = value;\n        bassSettings.synth.oscillator.type = value;\n      } else if (property === 'synthEnvelopeDecay') {\n        bassSynth.envelope.decay = value;\n        bassSettings.synth.envelope.decay = value;\n      } else if (property === 'synthEnvelopeRelease') {\n        bassSynth.envelope.release = value;\n        bassSettings.synth.envelope.release = value;\n      } else if (property === 'distortionWet') {\n        bassDistortion.wet.value = value;\n        bassSettings.distortion.wet = value;\n      } else if (property === 'autoWahWet') {\n        bassAutoWah.wet.value = value;\n        bassSettings.autoWah.wet = value;\n      } else if (property === 'autoFilterWet') {\n        bassAutoFilter.wet.value = value;\n        bassSettings.autoFilter.wet = value;\n      }\n\n      _this.setState({\n        bassSettings: bassSettings\n      });\n    };\n\n    _this.handleMelodyValueChange = function (property, value) {\n      var melodySettings = _this.state.melodySettings;\n\n      if (property === 'synthType') {\n        melodySynth.oscillator.type = value;\n        melodySettings.synth.oscillator.type = value;\n      } else if (property === 'synthEnvelopeAttack') {\n        melodySynth.envelope.attack = value;\n        melodySettings.synth.envelope.attack = value;\n      } else if (property === 'synthEnvelopeDecay') {\n        melodySynth.envelope.decay = value;\n        melodySettings.synth.envelope.decay = value;\n      } else if (property === 'synthEnvelopeSustain') {\n        melodySynth.envelope.sustain = value;\n        melodySettings.synth.envelope.sustain = value;\n      } else if (property === 'synthEnvelopeRelease') {\n        melodySynth.envelope.release = value;\n        melodySettings.synth.envelope.release = value;\n      } else if (property === 'pingPongDelayWet') {\n        melodyPingPongDelay.wet.value = value;\n        melodySettings.pingPongDelay.wet = value;\n      } else if (property === 'chorusWet') {\n        melodyChorus.wet.value = value;\n        melodySettings.chorus.wet = value;\n      } else if (property === 'distortionWet') {\n        melodyDistortion.wet.value = value;\n        melodySettings.distortion.wet = value;\n      } else if (property === 'autoWahWet') {\n        melodyAutoWah.wet.value = value;\n        melodySettings.autoWah.wet = value;\n      } else if (property === 'autoFilterWet') {\n        melodyAutoFilter.wet.value = value;\n        melodySettings.autoFilter.wet = value;\n      }\n\n      _this.setState({\n        melodySettings: melodySettings\n      });\n    };\n\n    _this.state = {\n      bassSettings: bassSettings,\n      melodySettings: melodySettings,\n      forestSettings: forestSettings\n    };\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          bassSettings = _this$state2.bassSettings,\n          melodySettings = _this$state2.melodySettings;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(SC_Button, {\n        text: \"Art Design & Coding Community\",\n        handleClick: this.handleStart,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"firstSynthContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ToneSynth, {\n        settings: bassSettings,\n        handleValueChange: this.handleBassValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(CalmSounds, {\n        settings: bassSettings,\n        handleValueChange: this.handleBassValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"secondSynthContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ToneSynth, {\n        settings: melodySettings,\n        handleValueChange: this.handleMelodyValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(CalmSounds, {\n        settings: melodySettings,\n        handleValueChange: this.handleMelodyValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 12\n        }\n      }))));\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport { Container as default };","map":{"version":3,"names":["Tone","React","Component","bassSettings","melodySettings","pianoSettings","drumsSettings","birdsSettings","forestSettings","ToneSynth","CalmSounds","SC_Button","SC_Slider","bassSynth","bassChorus","bassPingPongDelay","bassDistortion","bassAutoWah","bassAutoFilter","melodySynth","melodyChorus","melodyPingPongDelay","melodyDistortion","melodyAutoWah","melodyAutoFilter","forestSynth","forestPingPongDelay","forestDistortion","forestAutoWah","forestAutoFilter","Container","props","handleStart","state","Synth","synth","Distortion","distortion","AutoWah","autoWah","AutoFilter","autoFilter","start","chain","Chorus","chorus","PingPongDelay","pingPongDelay","toDestination","melodyPart","Part","time","note","triggerAttackRelease","noteName","duration","velocity","sequence","steps","loopEnd","loop","forestPart","sampler","Sampler","urls","A1","A2","A3","A4","A5","A6","A7","A8","baseUrl","pianoPart","birdsPart","Transport","handleBassValueChange","property","value","oscillator","type","envelope","decay","release","wet","setState","handleMelodyValueChange","attack","sustain"],"sources":["/Users/yevgenia/Desktop/Web-development/ADC-Generative-Art-Boilerplate-2023/app/javascript/prototypes/prototype_14/Container.jsx"],"sourcesContent":["import * as Tone from 'tone'\nimport React, { Component } from 'react'\n\nimport * as bassSettings from './tunes/bass'\nimport * as melodySettings from './tunes/melody'\nimport * as pianoSettings from './tunes/piano'\nimport * as drumsSettings from './tunes/drums'\nimport * as birdsSettings from './tunes/birds'\nimport * as forestSettings from './tunes/forest'\n\nimport ToneSynth from './modules/ToneSynth'\nimport CalmSounds from './modules/CalmSounds'\nimport SC_Button from './components/SC_Button'\nimport SC_Slider from './components/SC_Slider'\n\n\nlet bassSynth\nlet bassChorus\nlet bassPingPongDelay //namepspace bass\nlet bassDistortion\nlet bassAutoWah\nlet bassAutoFilter\n\nlet melodySynth\nlet melodyChorus\nlet melodyPingPongDelay\nlet melodyDistortion\nlet melodyAutoWah\nlet melodyAutoFilter\n\n\nlet forestSynth\nlet forestPingPongDelay\nlet forestDistortion\nlet forestAutoWah\nlet forestAutoFilter\n\nexport default class Container extends Component {\n  constructor(props) {\n    super(props)\n\n   \n\n   \n\n    this.state = {\n      bassSettings,\n      melodySettings,\n      forestSettings\n   \n    }\n  }\n\n  handleStart = () => {\n    const { bassSettings, melodySettings, forestSettings } = this.state\n\n    //\n    //\n    bassSynth = new Tone.Synth(bassSettings.synth)\n    bassDistortion = new Tone.Distortion(bassSettings.distortion)\n    bassAutoWah = new Tone.AutoWah(bassSettings.autoWah)\n    bassAutoFilter = new Tone.AutoFilter(bassSettings.autoFilter).start()\n    bassSynth.chain(bassDistortion, bassAutoWah, bassAutoFilter)\n\n    \n\n    // const bassPart = new Tone.Part((time, note) => {\n    //   bassSynth.triggerAttackRelease(\n    //     note.noteName,\n    //     note.duration,\n    //     time,\n    //     note.velocity\n    //   )\n    // }, bassSettings.sequence.steps).start(0)\n\n    // bassPart.loopEnd = bassSettings.sequence.duration\n    // bassPart.loop = true\n    //\n    //\n    melodySynth = new Tone.Synth(melodySettings.synth)\n    melodyChorus = new Tone.Chorus(melodySettings.chorus).start()\n    melodyDistortion = new Tone.Distortion(melodySettings.distortion)\n    melodyAutoWah = new Tone.AutoWah(melodySettings.autoWah)\n    melodyAutoFilter = new Tone.AutoFilter(melodySettings.autoFilter).start()\n    melodyPingPongDelay = new Tone.PingPongDelay(\n      melodySettings.pingPongDelay\n    ).toDestination()\n\n    melodySynth.chain(melodyChorus, melodyDistortion, melodyAutoWah, melodyAutoFilter, melodyPingPongDelay)\n\n    \n\n    const melodyPart = new Tone.Part((time, note) => {\n      melodySynth.triggerAttackRelease(\n        note.noteName,\n        note.duration,\n        time,\n        note.velocity\n      )\n    }, melodySettings.sequence.steps).start(0)\n\n    melodyPart.loopEnd = melodySettings.sequence.duration\n    melodyPart.loop = true\n    //\n    //\n\n\n    //\n    //\n    forestSynth = new Tone.Synth(forestSettings.synth)\n    forestDistortion = new Tone.Distortion(forestSettings.distortion)\n    forestAutoWah = new Tone.AutoWah(forestSettings.autoWah)\n    forestAutoFilter = new Tone.AutoFilter(forestSettings.autoFilter).start()\n    forestPingPongDelay = new Tone.PingPongDelay(\n      forestSettings.pingPongDelay\n    ).toDestination()\n    forestSynth.chain( forestDistortion, forestAutoWah, forestAutoFilter ,forestPingPongDelay)\n\n    const forestPart = new Tone.Part((time, note) => {\n      forestSynth.triggerAttackRelease(\n        note.noteName,\n        note.duration,\n        time,\n        note.velocity\n      )\n    }, forestSettings.sequence.steps).start(0)\n\n    forestPart.loopEnd = forestSettings.sequence.duration\n    forestPart.loop = true\n    //\n    //\n\n\n    const sampler = new Tone.Sampler({\n      urls: {\n        A1: \"00001-Linn-9000-BassDrumrum1.mp3\",   \n        A2: \"00020-Linn-9000-Tom-1.mp3\",\n        A3: \"looperman-l-4574891-0303601-my-space-sad-ambient-piano.wav\",\n        A4: \"vinyl-hiss-5862.mp3\",\n        A5: \"00048-Vermona-DRM1-MK3-BassDrum25.mp3\",\n        A6: \"00016-Linn-9000-Snare-2.mp3\",\n        A7: \"lofi-sad-beat.mp3\",\n        A8: \"mixkit-little-birds-singing-in-the-trees-17.wav\",\n      },\n      baseUrl: \"http://localhost:3000/samples/\",\n     \n    }).toDestination();\n\n    const pianoPart = new Tone.Part((time, note) => {\n      sampler.triggerAttackRelease(\n        note.noteName,\n        note.duration,\n        time,\n        note.velocity\n      )\n    }, pianoSettings.sequence.steps).start(0)\n\n    pianoPart.loopEnd = pianoSettings.sequence.duration\n    pianoPart.loop = true\n    // //\n\n    const birdsPart = new Tone.Part((time, note) => {\n      sampler.triggerAttackRelease(\n        note.noteName,\n        note.duration,\n        time,\n        note.velocity\n      )\n    }, birdsSettings.sequence.steps).start(0)\n\n    birdsPart.loopEnd = birdsSettings.sequence.duration\n    birdsPart.loop = true\n    //\n    //\n\n\n    // const drumsPart = new Tone.Part((time, note) => {\n    //   sampler.triggerAttackRelease(\n    //     note.noteName,\n    //     note.duration,\n    //     time,\n    //     note.velocity\n    //   )\n    // }, drumsSettings.sequence.steps).start(0)\n\n    // drumsPart.loopEnd = drumsSettings.sequence.duration\n    // drumsPart.loop = true\n    // //\n\n\n    Tone.Transport.start()\n  }\n\n  handleBassValueChange = (property, value) => {\n    const { bassSettings } = this.state\n\n    if (property === 'synthType') {\n      bassSynth.oscillator.type = value\n      bassSettings.synth.oscillator.type = value\n    } else if (property === 'synthEnvelopeDecay') {\n      bassSynth.envelope.decay = value\n      bassSettings.synth.envelope.decay = value\n    } else if (property === 'synthEnvelopeRelease') {\n      bassSynth.envelope.release = value\n      bassSettings.synth.envelope.release = value\n    } else if (property === 'distortionWet') {\n      bassDistortion.wet.value = value\n      bassSettings.distortion.wet = value\n    } else if (property === 'autoWahWet') {\n      bassAutoWah.wet.value = value\n      bassSettings.autoWah.wet = value\n    } else if (property === 'autoFilterWet') {\n      bassAutoFilter.wet.value = value\n      bassSettings.autoFilter.wet = value\n    }\n\n    this.setState({\n      bassSettings\n    })\n  }\n\n\n  handleMelodyValueChange = (property, value) => {\n    const { melodySettings } = this.state\n\n    if (property === 'synthType') {\n      melodySynth.oscillator.type = value\n      melodySettings.synth.oscillator.type = value\n    } else if (property === 'synthEnvelopeAttack') {\n      melodySynth.envelope.attack = value\n      melodySettings.synth.envelope.attack = value\n    } else if (property === 'synthEnvelopeDecay') {\n      melodySynth.envelope.decay = value\n      melodySettings.synth.envelope.decay = value\n    } else if (property === 'synthEnvelopeSustain') {\n      melodySynth.envelope.sustain = value\n      melodySettings.synth.envelope.sustain = value\n    } else if (property === 'synthEnvelopeRelease') {\n      melodySynth.envelope.release = value\n      melodySettings.synth.envelope.release = value\n    }else if (property === 'pingPongDelayWet') {\n      melodyPingPongDelay.wet.value = value\n      melodySettings.pingPongDelay.wet = value\n    } else if (property === 'chorusWet') {\n      melodyChorus.wet.value = value\n      melodySettings.chorus.wet = value\n    } else if (property === 'distortionWet') {\n      melodyDistortion.wet.value = value\n      melodySettings.distortion.wet = value\n    } else if (property === 'autoWahWet') {\n      melodyAutoWah.wet.value = value\n      melodySettings.autoWah.wet = value\n    } else if (property === 'autoFilterWet') {\n      melodyAutoFilter.wet.value = value\n      melodySettings.autoFilter.wet = value\n    }\n\n    this.setState({\n      melodySettings\n    })\n  }\n\n\n  render() {\n    const { bassSettings, melodySettings } = this.state\n\n\n    return (\n      <div className=\"Container\">\n          <SC_Button\n            text=\"Art Design & Coding Community\"\n            handleClick={this.handleStart}\n          />\n\n\n        <div className='wrapper'>\n      \n        <div className='firstSynthContainer'>\n\n            <ToneSynth \n              settings={bassSettings}\n              handleValueChange={this.handleBassValueChange} \n            />\n            <CalmSounds \n               settings={bassSettings}\n               handleValueChange={this.handleBassValueChange}\n            />\n\n        </div>\n      \n        <div className='secondSynthContainer'>\n          <ToneSynth \n            settings={melodySettings}\n            handleValueChange={this.handleMelodyValueChange} \n          />\n           <CalmSounds \n               settings={melodySettings}\n               handleValueChange={this.handleMelodyValueChange}\n            />\n        \n        </div>\n        </div>\n      </div>\n    )\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}