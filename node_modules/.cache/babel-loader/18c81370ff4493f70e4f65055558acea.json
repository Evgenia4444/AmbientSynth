{"ast":null,"code":"var _jsxFileName = \"/Users/yevgenia/Desktop/Web-development/AmbientSynth/app/javascript/prototypes/prototype_14/Container.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport * as Tone from 'tone';\nimport React, { Component } from 'react';\nimport * as bassSettings from './tunes/bass';\nimport * as melodySettings from './tunes/melody';\nimport * as pianoSettings from './tunes/piano';\nimport * as drumsSettings from './tunes/drums';\nimport * as birdsSettings from './tunes/birds';\nimport * as forestSettings from './tunes/forest';\nimport * as oceanSettings from './tunes/ocean';\nimport * as fireSettings from './tunes/fire';\nimport ToneSynth from './modules/ToneSynth';\nimport CalmSounds from './modules/CalmSounds';\nimport Widener from './modules/Widener';\nimport HigherSounds from './modules/HigherSounds';\nimport SC_Button from './components/SC_Button';\nimport SC_Slider from './components/SC_Slider';\nvar bassSynth;\nvar bassChorus;\nvar bassPingPongDelay; //namepspace bass\n\nvar bassDistortion;\nvar bassAutoWah;\nvar bassAutoFilter;\nvar melodySynth;\nvar melodyChorus;\nvar melodyPingPongDelay;\nvar melodyDistortion;\nvar melodyAutoWah;\nvar melodyAutoFilter;\nvar forestSynth;\nvar forestPingPongDelay;\nvar forestDistortion;\nvar forestAutoWah;\nvar forestAutoFilter;\nvar forestStereoWidener;\nvar forestTremolo;\nvar forestPitchShift;\nvar oceanSynth;\nvar oceanPingPongDelay;\nvar oceanDistortion;\nvar oceanAutoWah;\nvar oceanAutoFilter;\nvar oceanStereoWidener;\nvar oceanTremolo;\nvar oceanPitchShift;\nvar fireSynth;\nvar firePingPongDelay;\nvar fireDistortion;\nvar fireAutoWah;\nvar fireAutoFilter;\nvar fireStereoWidener;\nvar fireTremolo;\nvar firePitchShift;\nvar fireVibrato;\n\nvar Container = /*#__PURE__*/function (_Component) {\n  _inherits(Container, _Component);\n\n  var _super = _createSuper(Container);\n\n  function Container(props) {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _super.call(this, props);\n\n    _this.handleStart = function () {\n      var _this$state = _this.state,\n          bassSettings = _this$state.bassSettings,\n          melodySettings = _this$state.melodySettings,\n          forestSettings = _this$state.forestSettings,\n          oceanSettings = _this$state.oceanSettings,\n          fireSettings = _this$state.fireSettings; //\n      //\n\n      bassSynth = new Tone.Synth(bassSettings.synth);\n      bassDistortion = new Tone.Distortion(bassSettings.distortion);\n      bassAutoWah = new Tone.AutoWah(bassSettings.autoWah);\n      bassAutoFilter = new Tone.AutoFilter(bassSettings.autoFilter).start();\n      bassSynth.chain(bassDistortion, bassAutoWah, bassAutoFilter); // const bassPart = new Tone.Part((time, note) => {\n      //   bassSynth.triggerAttackRelease(\n      //     note.noteName,\n      //     note.duration,\n      //     time,\n      //     note.velocity\n      //   )\n      // }, bassSettings.sequence.steps).start(0)\n      // bassPart.loopEnd = bassSettings.sequence.duration\n      // bassPart.loop = true\n      //\n      //\n\n      melodySynth = new Tone.Synth(melodySettings.synth);\n      melodyChorus = new Tone.Chorus(melodySettings.chorus).start();\n      melodyDistortion = new Tone.Distortion(melodySettings.distortion);\n      melodyAutoWah = new Tone.AutoWah(melodySettings.autoWah);\n      melodyAutoFilter = new Tone.AutoFilter(melodySettings.autoFilter).start();\n      melodyPingPongDelay = new Tone.PingPongDelay(melodySettings.pingPongDelay).toDestination();\n      melodySynth.chain(melodyChorus, melodyDistortion, melodyAutoWah, melodyAutoFilter, melodyPingPongDelay); // const melodyPart = new Tone.Part((time, note) => {\n      //   melodySynth.triggerAttackRelease(\n      //     note.noteName,\n      //     note.duration,\n      //     time,\n      //     note.velocity\n      //   )\n      // }, melodySettings.sequence.steps).start(0)\n      // melodyPart.loopEnd = melodySettings.sequence.duration\n      // melodyPart.loop = true\n      //\n      //\n      //\n      //\n\n      forestSynth = new Tone.Synth(forestSettings.synth);\n      forestDistortion = new Tone.Distortion(forestSettings.distortion);\n      forestAutoWah = new Tone.AutoWah(forestSettings.autoWah);\n      forestAutoFilter = new Tone.AutoFilter(forestSettings.autoFilter).start();\n      forestPingPongDelay = new Tone.PingPongDelay(forestSettings.pingPongDelay).toDestination();\n      forestStereoWidener = new Tone.StereoWidener(forestSettings.stereoWidener);\n      forestTremolo = new Tone.Tremolo(forestSettings.tremolo);\n      forestPitchShift = new Tone.PitchShift(forestSettings.pitchShift);\n      forestSynth.chain(forestDistortion, forestAutoWah, forestAutoFilter, forestStereoWidener, forestTremolo, forestPitchShift, forestPingPongDelay); // const forestPart = new Tone.Part((time, note) => {\n      //   forestSynth.triggerAttackRelease(\n      //     note.noteName,\n      //     note.duration,\n      //     time,\n      //     note.velocity\n      //   )\n      // }, forestSettings.sequence.steps).start(0)\n      // forestPart.loopEnd = forestSettings.sequence.duration\n      // forestPart.loop = true\n      //\n      //\n      //\n      //\n\n      oceanSynth = new Tone.Synth(oceanSettings.synth);\n      oceanDistortion = new Tone.Distortion(oceanSettings.distortion);\n      oceanAutoWah = new Tone.AutoWah(oceanSettings.autoWah);\n      oceanAutoFilter = new Tone.AutoFilter(oceanSettings.autoFilter).start();\n      oceanPingPongDelay = new Tone.PingPongDelay(oceanSettings.pingPongDelay).toDestination();\n      oceanStereoWidener = new Tone.StereoWidener(oceanSettings.stereoWidener);\n      oceanTremolo = new Tone.Tremolo(oceanSettings.tremolo);\n      oceanPitchShift = new Tone.PitchShift(oceanSettings.pitchShift);\n      oceanSynth.chain(oceanDistortion, oceanAutoWah, oceanAutoFilter, oceanStereoWidener, oceanTremolo, oceanPitchShift, oceanPingPongDelay); // const oceanPart = new Tone.Part((time, note) => {\n      //   oceanSynth.triggerAttackRelease(\n      //     note.noteName,\n      //     note.duration,\n      //     time,\n      //     note.velocity\n      //   )\n      // }, oceanSettings.sequence.steps).start(0)\n      // oceanPart.loopEnd = oceanSettings.sequence.duration\n      // oceanPart.loop = true\n      //\n      //\n      //\n      //\n\n      fireSynth = new Tone.Synth(fireSettings.synth);\n      fireDistortion = new Tone.Distortion(fireSettings.distortion);\n      fireAutoWah = new Tone.AutoWah(fireSettings.autoWah);\n      fireAutoFilter = new Tone.AutoFilter(fireSettings.autoFilter).start();\n      firePingPongDelay = new Tone.PingPongDelay(fireSettings.pingPongDelay).toDestination();\n      fireStereoWidener = new Tone.StereoWidener(fireSettings.stereoWidener);\n      fireTremolo = new Tone.Tremolo(fireSettings.tremolo);\n      firePitchShift = new Tone.PitchShift(fireSettings.pitchShift);\n      fireVibrato = new Tone.Vibrato(fireSettings, vibreto);\n      fireSynth.chain(fireDistortion, fireAutoWah, fireAutoFilter, fireStereoWidener, fireTremolo, firePitchShift, fireVibrato, firePingPongDelay);\n      var firePart = new Tone.Part(function (time, note) {\n        fireSynth.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n      }, fireSettings.sequence.steps).start(0);\n      firePart.loopEnd = fireSettings.sequence.duration;\n      firePart.loop = true; //\n      //\n\n      var sampler = new Tone.Sampler({\n        urls: {\n          A1: \"00001-Linn-9000-BassDrumrum1.mp3\",\n          A2: \"00020-Linn-9000-Tom-1.mp3\",\n          A3: \"looperman-l-2989317-0302008-dark-ambient-piano-blackforestbeats.wav\",\n          A4: \"vinyl-hiss-5862.mp3\",\n          A5: \"00048-Vermona-DRM1-MK3-BassDrum25.mp3\",\n          A6: \"00016-Linn-9000-Snare-2.mp3\",\n          A7: \"lofi-sad-beat.mp3\",\n          A8: \"mixkit-little-birds-singing-in-the-trees-17.wav\"\n        },\n        baseUrl: \"http://localhost:3000/samples/\"\n      }).toDestination(); // const pianoPart = new Tone.Part((time, note) => {\n      //   sampler.triggerAttackRelease(\n      //     note.noteName,\n      //     note.duration,\n      //     time,\n      //     note.velocity\n      //   )\n      // }, pianoSettings.sequence.steps).start(0)\n      // pianoPart.loopEnd = pianoSettings.sequence.duration\n      // pianoPart.loop = true\n      // //\n      // const birdsPart = new Tone.Part((time, note) => {\n      //   sampler.triggerAttackRelease(\n      //     note.noteName,\n      //     note.duration,\n      //     time,\n      //     note.velocity\n      //   )\n      // }, birdsSettings.sequence.steps).start(0)\n      // birdsPart.loopEnd = birdsSettings.sequence.duration\n      // birdsPart.loop = true\n      //\n      //\n      // const drumsPart = new Tone.Part((time, note) => {\n      //   sampler.triggerAttackRelease(\n      //     note.noteName,\n      //     note.duration,\n      //     time,\n      //     note.velocity\n      //   )\n      // }, drumsSettings.sequence.steps).start(0)\n      // drumsPart.loopEnd = drumsSettings.sequence.duration\n      // drumsPart.loop = true\n      // //\n\n      Tone.Transport.start();\n    };\n\n    _this.handleBassValueChange = function (property, value) {\n      var bassSettings = _this.state.bassSettings;\n\n      if (property === 'synthType') {\n        bassSynth.oscillator.type = value;\n        bassSettings.synth.oscillator.type = value;\n      } else if (property === 'synthEnvelopeDecay') {\n        bassSynth.envelope.decay = value;\n        bassSettings.synth.envelope.decay = value;\n      } else if (property === 'synthEnvelopeRelease') {\n        bassSynth.envelope.release = value;\n        bassSettings.synth.envelope.release = value;\n      } else if (property === 'distortionWet') {\n        bassDistortion.wet.value = value;\n        bassSettings.distortion.wet = value;\n      } else if (property === 'autoWahWet') {\n        bassAutoWah.wet.value = value;\n        bassSettings.autoWah.wet = value;\n      } else if (property === 'autoFilterWet') {\n        bassAutoFilter.wet.value = value;\n        bassSettings.autoFilter.wet = value;\n      }\n\n      _this.setState({\n        bassSettings: bassSettings\n      });\n    };\n\n    _this.handleMelodyValueChange = function (property, value) {\n      var melodySettings = _this.state.melodySettings;\n\n      if (property === 'synthType') {\n        melodySynth.oscillator.type = value;\n        melodySettings.synth.oscillator.type = value;\n      } else if (property === 'synthEnvelopeAttack') {\n        melodySynth.envelope.attack = value;\n        melodySettings.synth.envelope.attack = value;\n      } else if (property === 'synthEnvelopeDecay') {\n        melodySynth.envelope.decay = value;\n        melodySettings.synth.envelope.decay = value;\n      } else if (property === 'synthEnvelopeSustain') {\n        melodySynth.envelope.sustain = value;\n        melodySettings.synth.envelope.sustain = value;\n      } else if (property === 'synthEnvelopeRelease') {\n        melodySynth.envelope.release = value;\n        melodySettings.synth.envelope.release = value;\n      } else if (property === 'pingPongDelayWet') {\n        melodyPingPongDelay.wet.value = value;\n        melodySettings.pingPongDelay.wet = value;\n      } else if (property === 'chorusWet') {\n        melodyChorus.wet.value = value;\n        melodySettings.chorus.wet = value;\n      } else if (property === 'distortionWet') {\n        melodyDistortion.wet.value = value;\n        melodySettings.distortion.wet = value;\n      } else if (property === 'autoWahWet') {\n        melodyAutoWah.wet.value = value;\n        melodySettings.autoWah.wet = value;\n      } else if (property === 'autoFilterWet') {\n        melodyAutoFilter.wet.value = value;\n        melodySettings.autoFilter.wet = value;\n      }\n\n      _this.setState({\n        melodySettings: melodySettings\n      });\n    };\n\n    _this.handleForestValueChange = function (property, value) {\n      var forestSettings = _this.state.forestSettings;\n\n      if (property === 'synthType') {\n        forestSynth.oscillator.type = value;\n        forestSettings.synth.oscillator.type = value;\n      } else if (property === 'synthEnvelopeAttack') {\n        forestSynth.envelope.attack = value;\n        forestSettings.synth.envelope.attack = value;\n      } else if (property === 'synthEnvelopeDecay') {\n        forestSynth.envelope.decay = value;\n        forestSettings.synth.envelope.decay = value;\n      } else if (property === 'synthEnvelopeSustain') {\n        forestSynth.envelope.sustain = value;\n        forestSettings.synth.envelope.sustain = value;\n      } else if (property === 'synthEnvelopeRelease') {\n        forestSynth.envelope.release = value;\n        forestSettings.synth.envelope.release = value;\n      } else if (property === 'pingPongDelayWet') {\n        forestPingPongDelay.wet.value = value;\n        forestSettings.pingPongDelay.wet = value;\n      } else if (property === 'chorusWet') {\n        forestChorus.wet.value = value;\n        forestSettings.chorus.wet = value;\n      } else if (property === 'distortionWet') {\n        forestDistortion.wet.value = value;\n        forestSettings.distortion.wet = value;\n      } else if (property === 'autoWahWet') {\n        forestAutoWah.wet.value = value;\n        forestSettings.autoWah.wet = value;\n      } else if (property === 'autoFilterWet') {\n        forestAutoFilter.wet.value = value;\n        forestSettings.autoFilter.wet = value;\n      } else if (property === 'stereoWidenerWet') {\n        forestStereoWidener.wet.value = value;\n        forestSettings.stereoWidener.wet = value;\n      } else if (property === 'tremoloWet') {\n        forestTremolo.wet.value = value;\n        forestSettings.tremolo.wet = value;\n      } else if (property === 'pitchShiftWet') {\n        forestPitchShift.wet.value = value;\n        forestSettings.pitchShift.wet = value;\n      }\n\n      _this.setState({\n        forestSettings: forestSettings\n      });\n    };\n\n    _this.handleOceanValueChange = function (property, value) {\n      var oceanSettings = _this.state.oceanSettings;\n\n      if (property === 'synthType') {\n        oceanSynth.oscillator.type = value;\n        oceanSettings.synth.oscillator.type = value;\n      } else if (property === 'synthEnvelopeAttack') {\n        oceanSynth.envelope.attack = value;\n        oceanSettings.synth.envelope.attack = value;\n      } else if (property === 'synthEnvelopeDecay') {\n        oceanSynth.envelope.decay = value;\n        oceanSettings.synth.envelope.decay = value;\n      } else if (property === 'synthEnvelopeSustain') {\n        oceanSynth.envelope.sustain = value;\n        oceanSettings.synth.envelope.sustain = value;\n      } else if (property === 'synthEnvelopeRelease') {\n        oceanSynth.envelope.release = value;\n        oceanSettings.synth.envelope.release = value;\n      } else if (property === 'pingPongDelayWet') {\n        oceanPingPongDelay.wet.value = value;\n        oceanSettings.pingPongDelay.wet = value;\n      } else if (property === 'chorusWet') {\n        oceanChorus.wet.value = value;\n        oceanSettings.chorus.wet = value;\n      } else if (property === 'distortionWet') {\n        oceanDistortion.wet.value = value;\n        oceanSettings.distortion.wet = value;\n      } else if (property === 'autoWahWet') {\n        oceanAutoWah.wet.value = value;\n        oceanSettings.autoWah.wet = value;\n      } else if (property === 'autoFilterWet') {\n        oceanAutoFilter.wet.value = value;\n        oceanSettings.autoFilter.wet = value;\n      } else if (property === 'stereoWidenerWet') {\n        oceanStereoWidener.wet.value = value;\n        oceanSettings.stereoWidener.wet = value;\n      } else if (property === 'tremoloWet') {\n        oceanTremolo.wet.value = value;\n        oceanSettings.tremolo.wet = value;\n      } else if (property === 'pitchShiftWet') {\n        oceanPitchShift.wet.value = value;\n        oceanSettings.pitchShift.wet = value;\n      }\n\n      _this.setState({\n        forestSettings: forestSettings\n      });\n    };\n\n    _this.state = {\n      bassSettings: bassSettings,\n      melodySettings: melodySettings,\n      forestSettings: forestSettings,\n      oceanSettings: oceanSettings,\n      fireSettings: fireSettings\n    };\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          bassSettings = _this$state2.bassSettings,\n          melodySettings = _this$state2.melodySettings,\n          forestSettings = _this$state2.forestSettings,\n          oceanSettings = _this$state2.oceanSettings;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(SC_Button, {\n        text: \"Ambient Synth\",\n        handleClick: this.handleStart,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"firstSynthContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 11\n        }\n      }, \"Forest\"), /*#__PURE__*/React.createElement(ToneSynth, {\n        settings: bassSettings,\n        handleValueChange: this.handleBassValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(CalmSounds, {\n        settings: bassSettings,\n        handleValueChange: this.handleBassValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"secondSynthContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 9\n        }\n      }, \"Wind\"), /*#__PURE__*/React.createElement(ToneSynth, {\n        settings: melodySettings,\n        handleValueChange: this.handleMelodyValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(CalmSounds, {\n        settings: melodySettings,\n        handleValueChange: this.handleMelodyValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 12\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"firstSynthContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 11\n        }\n      }, \"Forest\"), /*#__PURE__*/React.createElement(ToneSynth, {\n        settings: forestSettings,\n        handleValueChange: this.handleForestValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(CalmSounds, {\n        settings: forestSettings,\n        handleValueChange: this.handleForestValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Widener, {\n        settings: forestSettings,\n        handleValueChange: this.handleForestValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(HigherSounds, {\n        settings: forestSettings,\n        handleValueChange: this.handleForestValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 16\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"secondSynthContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 11\n        }\n      }, \"Ocean\"), /*#__PURE__*/React.createElement(ToneSynth, {\n        settings: oceanSettings,\n        handleValueChange: this.handleOceanValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(CalmSounds, {\n        settings: oceanSettings,\n        handleValueChange: this.handleOceanValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Widener, {\n        settings: oceanSettings,\n        handleValueChange: this.handleOceanValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(HigherSounds, {\n        settings: oceanSettings,\n        handleValueChange: this.handleOceanValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 16\n        }\n      }))));\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport { Container as default };","map":{"version":3,"names":["Tone","React","Component","bassSettings","melodySettings","pianoSettings","drumsSettings","birdsSettings","forestSettings","oceanSettings","fireSettings","ToneSynth","CalmSounds","Widener","HigherSounds","SC_Button","SC_Slider","bassSynth","bassChorus","bassPingPongDelay","bassDistortion","bassAutoWah","bassAutoFilter","melodySynth","melodyChorus","melodyPingPongDelay","melodyDistortion","melodyAutoWah","melodyAutoFilter","forestSynth","forestPingPongDelay","forestDistortion","forestAutoWah","forestAutoFilter","forestStereoWidener","forestTremolo","forestPitchShift","oceanSynth","oceanPingPongDelay","oceanDistortion","oceanAutoWah","oceanAutoFilter","oceanStereoWidener","oceanTremolo","oceanPitchShift","fireSynth","firePingPongDelay","fireDistortion","fireAutoWah","fireAutoFilter","fireStereoWidener","fireTremolo","firePitchShift","fireVibrato","Container","props","handleStart","state","Synth","synth","Distortion","distortion","AutoWah","autoWah","AutoFilter","autoFilter","start","chain","Chorus","chorus","PingPongDelay","pingPongDelay","toDestination","StereoWidener","stereoWidener","Tremolo","tremolo","PitchShift","pitchShift","Vibrato","vibreto","firePart","Part","time","note","triggerAttackRelease","noteName","duration","velocity","sequence","steps","loopEnd","loop","sampler","Sampler","urls","A1","A2","A3","A4","A5","A6","A7","A8","baseUrl","Transport","handleBassValueChange","property","value","oscillator","type","envelope","decay","release","wet","setState","handleMelodyValueChange","attack","sustain","handleForestValueChange","forestChorus","handleOceanValueChange","oceanChorus"],"sources":["/Users/yevgenia/Desktop/Web-development/AmbientSynth/app/javascript/prototypes/prototype_14/Container.jsx"],"sourcesContent":["import * as Tone from 'tone'\nimport React, { Component } from 'react'\n\nimport * as bassSettings from './tunes/bass'\nimport * as melodySettings from './tunes/melody'\nimport * as pianoSettings from './tunes/piano'\nimport * as drumsSettings from './tunes/drums'\nimport * as birdsSettings from './tunes/birds'\nimport * as forestSettings from './tunes/forest'\nimport * as oceanSettings from './tunes/ocean'\nimport * as fireSettings from './tunes/fire'\n\nimport ToneSynth from './modules/ToneSynth'\nimport CalmSounds from './modules/CalmSounds'\nimport Widener from './modules/Widener'\nimport HigherSounds from './modules/HigherSounds'\nimport SC_Button from './components/SC_Button'\nimport SC_Slider from './components/SC_Slider'\n\n\nlet bassSynth\nlet bassChorus\nlet bassPingPongDelay //namepspace bass\nlet bassDistortion\nlet bassAutoWah\nlet bassAutoFilter\n\nlet melodySynth\nlet melodyChorus\nlet melodyPingPongDelay\nlet melodyDistortion\nlet melodyAutoWah\nlet melodyAutoFilter\n\n\nlet forestSynth\nlet forestPingPongDelay\nlet forestDistortion\nlet forestAutoWah\nlet forestAutoFilter\nlet forestStereoWidener\nlet forestTremolo\nlet forestPitchShift\n\nlet oceanSynth\nlet oceanPingPongDelay\nlet oceanDistortion\nlet oceanAutoWah\nlet oceanAutoFilter\nlet oceanStereoWidener\nlet oceanTremolo\nlet oceanPitchShift\n\nlet fireSynth\nlet firePingPongDelay\nlet fireDistortion\nlet fireAutoWah\nlet fireAutoFilter\nlet fireStereoWidener\nlet fireTremolo\nlet firePitchShift\nlet fireVibrato\n\nexport default class Container extends Component {\n  constructor(props) {\n    super(props)\n\n   \n\n   \n\n    this.state = {\n      bassSettings,\n      melodySettings,\n      forestSettings,\n      oceanSettings, \n      fireSettings\n   \n    }\n  }\n\n  handleStart = () => {\n    const { bassSettings, melodySettings, forestSettings, oceanSettings, fireSettings } = this.state\n\n    //\n    //\n    bassSynth = new Tone.Synth(bassSettings.synth)\n    bassDistortion = new Tone.Distortion(bassSettings.distortion)\n    bassAutoWah = new Tone.AutoWah(bassSettings.autoWah)\n    bassAutoFilter = new Tone.AutoFilter(bassSettings.autoFilter).start()\n    bassSynth.chain(bassDistortion, bassAutoWah, bassAutoFilter)\n\n    \n\n    // const bassPart = new Tone.Part((time, note) => {\n    //   bassSynth.triggerAttackRelease(\n    //     note.noteName,\n    //     note.duration,\n    //     time,\n    //     note.velocity\n    //   )\n    // }, bassSettings.sequence.steps).start(0)\n\n    // bassPart.loopEnd = bassSettings.sequence.duration\n    // bassPart.loop = true\n    //\n    //\n    melodySynth = new Tone.Synth(melodySettings.synth)\n    melodyChorus = new Tone.Chorus(melodySettings.chorus).start()\n    melodyDistortion = new Tone.Distortion(melodySettings.distortion)\n    melodyAutoWah = new Tone.AutoWah(melodySettings.autoWah)\n    melodyAutoFilter = new Tone.AutoFilter(melodySettings.autoFilter).start()\n    melodyPingPongDelay = new Tone.PingPongDelay(\n      melodySettings.pingPongDelay\n    ).toDestination()\n\n    melodySynth.chain(melodyChorus, melodyDistortion, melodyAutoWah, melodyAutoFilter, melodyPingPongDelay)\n\n    \n\n    // const melodyPart = new Tone.Part((time, note) => {\n    //   melodySynth.triggerAttackRelease(\n    //     note.noteName,\n    //     note.duration,\n    //     time,\n    //     note.velocity\n    //   )\n    // }, melodySettings.sequence.steps).start(0)\n\n    // melodyPart.loopEnd = melodySettings.sequence.duration\n    // melodyPart.loop = true\n    //\n    //\n\n\n    //\n    //\n    forestSynth = new Tone.Synth(forestSettings.synth)\n    forestDistortion = new Tone.Distortion(forestSettings.distortion)\n    forestAutoWah = new Tone.AutoWah(forestSettings.autoWah)\n    forestAutoFilter = new Tone.AutoFilter(forestSettings.autoFilter).start()\n    forestPingPongDelay = new Tone.PingPongDelay(\n      forestSettings.pingPongDelay\n    ).toDestination()\n    forestStereoWidener = new Tone.StereoWidener(forestSettings.stereoWidener)\n    forestTremolo = new Tone.Tremolo(forestSettings.tremolo)\n    forestPitchShift = new Tone.PitchShift(forestSettings.pitchShift)\n\n    forestSynth.chain( forestDistortion, forestAutoWah, forestAutoFilter, forestStereoWidener, \n                       forestTremolo, forestPitchShift, forestPingPongDelay)\n\n    // const forestPart = new Tone.Part((time, note) => {\n    //   forestSynth.triggerAttackRelease(\n    //     note.noteName,\n    //     note.duration,\n    //     time,\n    //     note.velocity\n    //   )\n    // }, forestSettings.sequence.steps).start(0)\n\n    // forestPart.loopEnd = forestSettings.sequence.duration\n    // forestPart.loop = true\n    //\n    //\n\n    //\n    //\n    oceanSynth = new Tone.Synth(oceanSettings.synth)\n    oceanDistortion = new Tone.Distortion(oceanSettings.distortion)\n    oceanAutoWah = new Tone.AutoWah(oceanSettings.autoWah)\n    oceanAutoFilter = new Tone.AutoFilter(oceanSettings.autoFilter).start()\n    oceanPingPongDelay = new Tone.PingPongDelay(\n      oceanSettings.pingPongDelay\n    ).toDestination()\n    oceanStereoWidener = new Tone.StereoWidener(oceanSettings.stereoWidener)\n    oceanTremolo = new Tone.Tremolo(oceanSettings.tremolo)\n    oceanPitchShift = new Tone.PitchShift(oceanSettings.pitchShift)\n\n    oceanSynth.chain( oceanDistortion, oceanAutoWah, oceanAutoFilter, oceanStereoWidener, \n                       oceanTremolo, oceanPitchShift, oceanPingPongDelay)\n\n    // const oceanPart = new Tone.Part((time, note) => {\n    //   oceanSynth.triggerAttackRelease(\n    //     note.noteName,\n    //     note.duration,\n    //     time,\n    //     note.velocity\n    //   )\n    // }, oceanSettings.sequence.steps).start(0)\n\n    // oceanPart.loopEnd = oceanSettings.sequence.duration\n    // oceanPart.loop = true\n    //\n    //\n\n    //\n    //\n    fireSynth = new Tone.Synth(fireSettings.synth)\n    fireDistortion = new Tone.Distortion(fireSettings.distortion)\n    fireAutoWah = new Tone.AutoWah(fireSettings.autoWah)\n    fireAutoFilter = new Tone.AutoFilter(fireSettings.autoFilter).start()\n    firePingPongDelay = new Tone.PingPongDelay(\n      fireSettings.pingPongDelay\n    ).toDestination()\n    fireStereoWidener = new Tone.StereoWidener(fireSettings.stereoWidener)\n    fireTremolo = new Tone.Tremolo(fireSettings.tremolo)\n    firePitchShift = new Tone.PitchShift(fireSettings.pitchShift)\n    fireVibrato = new Tone.Vibrato(fireSettings,vibreto)\n\n    fireSynth.chain( fireDistortion, fireAutoWah, fireAutoFilter, fireStereoWidener, \n                       fireTremolo, firePitchShift, fireVibrato, firePingPongDelay)\n\n    const firePart = new Tone.Part((time, note) => {\n      fireSynth.triggerAttackRelease(\n        note.noteName,\n        note.duration,\n        time,\n        note.velocity\n      )\n    }, fireSettings.sequence.steps).start(0)\n\n    firePart.loopEnd = fireSettings.sequence.duration\n    firePart.loop = true\n    //\n    //\n\n\n    const sampler = new Tone.Sampler({\n      urls: {\n        A1: \"00001-Linn-9000-BassDrumrum1.mp3\",   \n        A2: \"00020-Linn-9000-Tom-1.mp3\",\n        A3: \"looperman-l-2989317-0302008-dark-ambient-piano-blackforestbeats.wav\",\n        A4: \"vinyl-hiss-5862.mp3\",\n        A5: \"00048-Vermona-DRM1-MK3-BassDrum25.mp3\",\n        A6: \"00016-Linn-9000-Snare-2.mp3\",\n        A7: \"lofi-sad-beat.mp3\",\n        A8: \"mixkit-little-birds-singing-in-the-trees-17.wav\",\n      },\n      baseUrl: \"http://localhost:3000/samples/\",\n     \n    }).toDestination();\n\n    // const pianoPart = new Tone.Part((time, note) => {\n    //   sampler.triggerAttackRelease(\n    //     note.noteName,\n    //     note.duration,\n    //     time,\n    //     note.velocity\n    //   )\n    // }, pianoSettings.sequence.steps).start(0)\n\n    // pianoPart.loopEnd = pianoSettings.sequence.duration\n    // pianoPart.loop = true\n    // //\n\n    // const birdsPart = new Tone.Part((time, note) => {\n    //   sampler.triggerAttackRelease(\n    //     note.noteName,\n    //     note.duration,\n    //     time,\n    //     note.velocity\n    //   )\n    // }, birdsSettings.sequence.steps).start(0)\n\n    // birdsPart.loopEnd = birdsSettings.sequence.duration\n    // birdsPart.loop = true\n    //\n    //\n\n\n    // const drumsPart = new Tone.Part((time, note) => {\n    //   sampler.triggerAttackRelease(\n    //     note.noteName,\n    //     note.duration,\n    //     time,\n    //     note.velocity\n    //   )\n    // }, drumsSettings.sequence.steps).start(0)\n\n    // drumsPart.loopEnd = drumsSettings.sequence.duration\n    // drumsPart.loop = true\n    // //\n\n\n    Tone.Transport.start()\n  }\n\n  handleBassValueChange = (property, value) => {\n    const { bassSettings } = this.state\n\n    if (property === 'synthType') {\n      bassSynth.oscillator.type = value\n      bassSettings.synth.oscillator.type = value\n    } else if (property === 'synthEnvelopeDecay') {\n      bassSynth.envelope.decay = value\n      bassSettings.synth.envelope.decay = value\n    } else if (property === 'synthEnvelopeRelease') {\n      bassSynth.envelope.release = value\n      bassSettings.synth.envelope.release = value\n    } else if (property === 'distortionWet') {\n      bassDistortion.wet.value = value\n      bassSettings.distortion.wet = value\n    } else if (property === 'autoWahWet') {\n      bassAutoWah.wet.value = value\n      bassSettings.autoWah.wet = value\n    } else if (property === 'autoFilterWet') {\n      bassAutoFilter.wet.value = value\n      bassSettings.autoFilter.wet = value\n    }\n\n    this.setState({\n      bassSettings\n    })\n  }\n\n\n  handleMelodyValueChange = (property, value) => {\n    const { melodySettings } = this.state\n\n    if (property === 'synthType') {\n      melodySynth.oscillator.type = value\n      melodySettings.synth.oscillator.type = value\n    } else if (property === 'synthEnvelopeAttack') {\n      melodySynth.envelope.attack = value\n      melodySettings.synth.envelope.attack = value\n    } else if (property === 'synthEnvelopeDecay') {\n      melodySynth.envelope.decay = value\n      melodySettings.synth.envelope.decay = value\n    } else if (property === 'synthEnvelopeSustain') {\n      melodySynth.envelope.sustain = value\n      melodySettings.synth.envelope.sustain = value\n    } else if (property === 'synthEnvelopeRelease') {\n      melodySynth.envelope.release = value\n      melodySettings.synth.envelope.release = value\n    }else if (property === 'pingPongDelayWet') {\n      melodyPingPongDelay.wet.value = value\n      melodySettings.pingPongDelay.wet = value\n    } else if (property === 'chorusWet') {\n      melodyChorus.wet.value = value\n      melodySettings.chorus.wet = value\n    } else if (property === 'distortionWet') {\n      melodyDistortion.wet.value = value\n      melodySettings.distortion.wet = value\n    } else if (property === 'autoWahWet') {\n      melodyAutoWah.wet.value = value\n      melodySettings.autoWah.wet = value\n    } else if (property === 'autoFilterWet') {\n      melodyAutoFilter.wet.value = value\n      melodySettings.autoFilter.wet = value\n    }\n\n    this.setState({\n      melodySettings\n    })\n  }\n\n  handleForestValueChange = (property, value) => {\n    const { forestSettings } = this.state\n\n    if (property === 'synthType') {\n      forestSynth.oscillator.type = value\n      forestSettings.synth.oscillator.type = value\n    } else if (property === 'synthEnvelopeAttack') {\n      forestSynth.envelope.attack = value\n      forestSettings.synth.envelope.attack = value\n    } else if (property === 'synthEnvelopeDecay') {\n      forestSynth.envelope.decay = value\n      forestSettings.synth.envelope.decay = value\n    } else if (property === 'synthEnvelopeSustain') {\n      forestSynth.envelope.sustain = value\n      forestSettings.synth.envelope.sustain = value\n    } else if (property === 'synthEnvelopeRelease') {\n      forestSynth.envelope.release = value\n      forestSettings.synth.envelope.release = value\n    }else if (property === 'pingPongDelayWet') {\n      forestPingPongDelay.wet.value = value\n      forestSettings.pingPongDelay.wet = value\n    } else if (property === 'chorusWet') {\n      forestChorus.wet.value = value\n      forestSettings.chorus.wet = value\n    } else if (property === 'distortionWet') {\n      forestDistortion.wet.value = value\n      forestSettings.distortion.wet = value\n    } else if (property === 'autoWahWet') {\n      forestAutoWah.wet.value = value\n      forestSettings.autoWah.wet = value\n    } else if (property === 'autoFilterWet') {\n      forestAutoFilter.wet.value = value\n      forestSettings.autoFilter.wet = value\n    } else if (property === 'stereoWidenerWet') {\n      forestStereoWidener.wet.value = value\n      forestSettings.stereoWidener.wet = value\n    } else if (property === 'tremoloWet') {\n      forestTremolo.wet.value = value\n      forestSettings.tremolo.wet = value\n    } else if (property === 'pitchShiftWet') {\n      forestPitchShift.wet.value = value\n      forestSettings.pitchShift.wet = value\n    }\n\n    this.setState({\n      forestSettings\n    })\n  }\n\n  handleOceanValueChange = (property, value) => {\n    const { oceanSettings } = this.state\n\n    if (property === 'synthType') {\n      oceanSynth.oscillator.type = value\n      oceanSettings.synth.oscillator.type = value\n    } else if (property === 'synthEnvelopeAttack') {\n      oceanSynth.envelope.attack = value\n      oceanSettings.synth.envelope.attack = value\n    } else if (property === 'synthEnvelopeDecay') {\n      oceanSynth.envelope.decay = value\n      oceanSettings.synth.envelope.decay = value\n    } else if (property === 'synthEnvelopeSustain') {\n      oceanSynth.envelope.sustain = value\n      oceanSettings.synth.envelope.sustain = value\n    } else if (property === 'synthEnvelopeRelease') {\n      oceanSynth.envelope.release = value\n      oceanSettings.synth.envelope.release = value\n    }else if (property === 'pingPongDelayWet') {\n      oceanPingPongDelay.wet.value = value\n      oceanSettings.pingPongDelay.wet = value\n    } else if (property === 'chorusWet') {\n      oceanChorus.wet.value = value\n      oceanSettings.chorus.wet = value\n    } else if (property === 'distortionWet') {\n      oceanDistortion.wet.value = value\n      oceanSettings.distortion.wet = value\n    } else if (property === 'autoWahWet') {\n      oceanAutoWah.wet.value = value\n      oceanSettings.autoWah.wet = value\n    } else if (property === 'autoFilterWet') {\n      oceanAutoFilter.wet.value = value\n      oceanSettings.autoFilter.wet = value\n    } else if (property === 'stereoWidenerWet') {\n      oceanStereoWidener.wet.value = value\n      oceanSettings.stereoWidener.wet = value\n    } else if (property === 'tremoloWet') {\n      oceanTremolo.wet.value = value\n      oceanSettings.tremolo.wet = value\n    } else if (property === 'pitchShiftWet') {\n      oceanPitchShift.wet.value = value\n      oceanSettings.pitchShift.wet = value\n    }\n\n    this.setState({\n      forestSettings\n    })\n  }\n\n\n\n  render() {\n    const { bassSettings, melodySettings, forestSettings, oceanSettings } = this.state\n\n\n    return (\n      <div className=\"Container\">\n\n\n        {/* <div className='header'>\n         <h1>Ambient Synth</h1>\n        </div> */}\n          <SC_Button\n            text=\"Ambient Synth\"\n            handleClick={this.handleStart}\n          />\n        <div className='wrapper'>\n      \n        <div className='firstSynthContainer'>\n          <h2>Forest</h2>\n            <ToneSynth \n              settings={bassSettings}\n              handleValueChange={this.handleBassValueChange} \n            />\n            <CalmSounds \n               settings={bassSettings}\n               handleValueChange={this.handleBassValueChange}\n            />\n\n        </div>\n      \n        <div className='secondSynthContainer'>\n        <h2>Wind</h2>\n          <ToneSynth \n            settings={melodySettings}\n            handleValueChange={this.handleMelodyValueChange} \n          />\n           <CalmSounds \n               settings={melodySettings}\n               handleValueChange={this.handleMelodyValueChange}\n            />\n        \n        </div>\n        </div>\n\n        <div className='wrapper'>\n      \n          <div className='firstSynthContainer'>\n          <h2>Forest</h2>\n              <ToneSynth \n                settings={forestSettings}\n                handleValueChange={this.handleForestValueChange} \n              />\n              <CalmSounds \n                settings={forestSettings}\n                handleValueChange={this.handleForestValueChange}\n              />\n              <Widener \n                settings={forestSettings}\n                handleValueChange={this.handleForestValueChange}\n              />\n               <HigherSounds \n                settings={forestSettings}\n                handleValueChange={this.handleForestValueChange}\n              />\n\n          </div>\n        \n          <div className='secondSynthContainer'>\n          <h2>Ocean</h2>\n              <ToneSynth \n                settings={oceanSettings}\n                handleValueChange={this.handleOceanValueChange} \n              />\n              <CalmSounds \n                settings={oceanSettings}\n                handleValueChange={this.handleOceanValueChange}\n              />\n              <Widener \n                settings={oceanSettings}\n                handleValueChange={this.handleOceanValueChange}\n              />\n               <HigherSounds \n                settings={oceanSettings}\n                handleValueChange={this.handleOceanValueChange}\n              />\n\n      \n      </div>\n      </div>\n      </div>\n    )\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}