{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst t = require(\"@webassemblyjs/ast\");\n\nconst _require = require(\"@webassemblyjs/wasm-parser\"),\n      decode = _require.decode;\n\nconst _require2 = require(\"@webassemblyjs/helper-module-context\"),\n      moduleContextFromModuleAST = _require2.moduleContextFromModuleAST;\n\nconst _require3 = require(\"tapable\"),\n      Tapable = _require3.Tapable;\n\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n/** @typedef {import(\"../Module\")} Module */\n\n\nconst JS_COMPAT_TYPES = new Set([\"i32\", \"f32\", \"f64\"]);\n/**\n * @param {t.Signature} signature the func signature\n * @returns {null | string} the type incompatible with js types\n */\n\nconst getJsIncompatibleType = signature => {\n  for (const param of signature.params) {\n    if (!JS_COMPAT_TYPES.has(param.valtype)) {\n      return `${param.valtype} as parameter`;\n    }\n  }\n\n  for (const type of signature.results) {\n    if (!JS_COMPAT_TYPES.has(type)) return `${type} as result`;\n  }\n\n  return null;\n};\n/**\n * TODO why are there two different Signature types?\n * @param {t.FuncSignature} signature the func signature\n * @returns {null | string} the type incompatible with js types\n */\n\n\nconst getJsIncompatibleTypeOfFuncSignature = signature => {\n  for (const param of signature.args) {\n    if (!JS_COMPAT_TYPES.has(param)) {\n      return `${param} as parameter`;\n    }\n  }\n\n  for (const type of signature.result) {\n    if (!JS_COMPAT_TYPES.has(type)) return `${type} as result`;\n  }\n\n  return null;\n};\n\nconst decoderOpts = {\n  ignoreCodeSection: true,\n  ignoreDataSection: true,\n  // this will avoid having to lookup with identifiers in the ModuleContext\n  ignoreCustomNameSection: true\n};\n\nclass WebAssemblyParser extends Tapable {\n  constructor(options) {\n    super();\n    this.hooks = {};\n    this.options = options;\n  }\n\n  parse(binary, state) {\n    // flag it as ESM\n    state.module.buildMeta.exportsType = \"namespace\"; // parse it\n\n    const program = decode(binary, decoderOpts);\n    const module = program.body[0];\n    const moduleContext = moduleContextFromModuleAST(module); // extract imports and exports\n\n    const exports = state.module.buildMeta.providedExports = [];\n    const jsIncompatibleExports = state.module.buildMeta.jsIncompatibleExports = [];\n    const importedGlobals = [];\n    t.traverse(module, {\n      ModuleExport(_ref) {\n        let node = _ref.node;\n        const descriptor = node.descr;\n\n        if (descriptor.exportType === \"Func\") {\n          const funcidx = descriptor.id.value;\n          /** @type {t.FuncSignature} */\n\n          const funcSignature = moduleContext.getFunction(funcidx);\n          const incompatibleType = getJsIncompatibleTypeOfFuncSignature(funcSignature);\n\n          if (incompatibleType) {\n            jsIncompatibleExports[node.name] = incompatibleType;\n          }\n        }\n\n        exports.push(node.name);\n\n        if (node.descr && node.descr.exportType === \"Global\") {\n          const refNode = importedGlobals[node.descr.id.value];\n\n          if (refNode) {\n            const dep = new WebAssemblyExportImportedDependency(node.name, refNode.module, refNode.name, refNode.descr.valtype);\n            state.module.addDependency(dep);\n          }\n        }\n      },\n\n      Global(_ref2) {\n        let node = _ref2.node;\n        const init = node.init[0];\n        let importNode = null;\n\n        if (init.id === \"get_global\") {\n          const globalIdx = init.args[0].value;\n\n          if (globalIdx < importedGlobals.length) {\n            importNode = importedGlobals[globalIdx];\n          }\n        }\n\n        importedGlobals.push(importNode);\n      },\n\n      ModuleImport(_ref3) {\n        let node = _ref3.node;\n\n        /** @type {false | string} */\n        let onlyDirectImport = false;\n\n        if (t.isMemory(node.descr) === true) {\n          onlyDirectImport = \"Memory\";\n        } else if (t.isTable(node.descr) === true) {\n          onlyDirectImport = \"Table\";\n        } else if (t.isFuncImportDescr(node.descr) === true) {\n          const incompatibleType = getJsIncompatibleType(node.descr.signature);\n\n          if (incompatibleType) {\n            onlyDirectImport = `Non-JS-compatible Func Sigurature (${incompatibleType})`;\n          }\n        } else if (t.isGlobalType(node.descr) === true) {\n          const type = node.descr.valtype;\n\n          if (!JS_COMPAT_TYPES.has(type)) {\n            onlyDirectImport = `Non-JS-compatible Global Type (${type})`;\n          }\n        }\n\n        const dep = new WebAssemblyImportDependency(node.module, node.name, node.descr, onlyDirectImport);\n        state.module.addDependency(dep);\n\n        if (t.isGlobalType(node.descr)) {\n          importedGlobals.push(node);\n        }\n      }\n\n    });\n    return state;\n  }\n\n}\n\nmodule.exports = WebAssemblyParser;","map":null,"metadata":{},"sourceType":"module"}